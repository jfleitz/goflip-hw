Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Z8 Encore! ANSI C Compiler Release 3.64
                           A     2    ; -nofastcall -const=ROM -listinc -model=S -opt
                           A     3    ; -noreduceopt -debug -norevaa -peephole -local
                           A     4    ; -alias 
                           A     5    	DEFINE timer_TEXT,SPACE=ROM
                           A     6    	FILE	".\timer.c"
                           A     7    .debug "C"
                           A     8    	SEGMENT ROM_DATA
                           A     9    
                           A    10    
                           A    11    ;**************************** _lamp_timer *****
                           A    12    ;Name                         Addr/Register   S
                           A    13    ;_lampISR                            IMPORT  --
                           A    14    
                           A    15    
                           A    16    ; Aggregate Stack Size: 0 (words)
                           A    17    
                           A    18    
                           A    19    	.FRAME _n_lamp_timer,?_n_lamp_timer,RDATA
                           A    20    	.FCALL _n_lampISR
                           A    21    	SEGMENT timer_TEXT
                           A    22    ;    1	/*!\file gpio.h
                           A    23    ;    2	 * \brief Definition file for the Z8 En
                           A    24    ;    3	 *
                           A    25    ;    4	 *  This file contains header informati
                           A    26    ;    5	 *  driver implementations for Z8 Encor
                           A    27    ;    6	 *
                           A    28    ;    7	 *  This source file uses Doxygen-style
                           A    29    ;    8	 *  automatically.
                           A    30    ;    9	 *
                           A    31    ;   10	 *  Copyright (C) 1999-2004 by  ZiLOG, 
                           A    32    ;   11	 *  All Rights Reserved.
                           A    33    ;   12	 */
                           A    34    ;   13	
                           A    35    ;   14	#pragma once // Include this file only 
                           A    36    ;   15	#ifndef _GPIO_H_
                           A    37    ;   16	#define _GPIO_H_
                           A    38    ;   17	
                           A    39    ;   18	#include <defines.h>
                           A    40    ;   19	
                           A    41    ;   20	
                           A    42    ;   21	#ifdef _DEBUG
                           A    43    ;   22	#define GPIOPARAMETER_CHECKING			                           A    44    ;   23	#endif
                           A    45    ;   24	
                           A    46    ;   25	
                           A    47    ;   26	/*! The GPIO ports available for partic
                           A    48    ;   27	#if (defined(EZ8_PORT4) && !defined(_Z8
                           A    49    ;   28	#define PORTD
                           A    50    ;   29	#endif
                           A    51    ;   30	
                           A    52    ;   31	#if defined(EZ8_PORT8)||defined(EZ8_POR
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   2


PC     Object              I  Line    Source timer.src
                           A    53    ;   32	#define PORTE
                           A    54    ;   33	#endif
                           A    55    ;   34	#if defined(EZ8_PORT8)
                           A    56    ;   35	#define PORTF
                           A    57    ;   36	#define PORTG
                           A    58    ;   37	#define PORTH
                           A    59    ;   38	#endif
                           A    60    ;   39	
                           A    61    ;   40	#define GPIOERR_SUCCESS		(CHAR)0		                           A    62    ;   41	#define GPIOERR_INVALIDPINS	(CHAR)1		                           A    63    ;   42	#define GPIOERR_FAILURE		(CHAR)(-1)	                           A    64    ;   43	
                           A    65    ;   44	
                           A    66    ;   45	/*! all the ports bits are set to input
                           A    67    ;   46	#define PORTA_ADDRVAL_DEF   0x01
                           A    68    ;   47	#define PORTA_CTLVAL_DEF    0xFF
                           A    69    ;   48	#define PORTA_OUTVAL_DEF    0x00
                           A    70    ;   49	
                           A    71    ;   50	#define PORTB_ADDRVAL_DEF   0x01
                           A    72    ;   51	#define PORTB_CTLVAL_DEF    0xFF
                           A    73    ;   52	#define PORTB_OUTVAL_DEF    0x00
                           A    74    ;   53	
                           A    75    ;   54	#define PORTC_ADDRVAL_DEF   0x01
                           A    76    ;   55	#define PORTC_CTLVAL_DEF    0xFF
                           A    77    ;   56	#define PORTC_OUTVAL_DEF    0x00
                           A    78    ;   57	
                           A    79    ;   58	#ifdef PORTD
                           A    80    ;   59	#define PORTD_ADDRVAL_DEF   0x01
                           A    81    ;   60	#define PORTD_CTLVAL_DEF    0xFF
                           A    82    ;   61	#define PORTD_OUTVAL_DEF    0x00
                           A    83    ;   62	#endif
                           A    84    ;   63	
                           A    85    ;   64	#ifdef PORTE
                           A    86    ;   65	#define PORTE_ADDRVAL_DEF   0x01
                           A    87    ;   66	#define PORTE_CTLVAL_DEF    0xFF
                           A    88    ;   67	#define PORTE_OUTVAL_DEF    0x00
                           A    89    ;   68	#endif
                           A    90    ;   69	
                           A    91    ;   70	#ifdef PORTF
                           A    92    ;   71	#define PORTF_ADDRVAL_DEF   0x01
                           A    93    ;   72	#define PORTF_CTLVAL_DEF    0xFF
                           A    94    ;   73	#define PORTF_OUTVAL_DEF    0x00
                           A    95    ;   74	#endif
                           A    96    ;   75	
                           A    97    ;   76	#ifdef PORTG
                           A    98    ;   77	#define PORTG_ADDRVAL_DEF   0x01
                           A    99    ;   78	#define PORTG_CTLVAL_DEF    0xFF
                           A   100    ;   79	#define PORTG_OUTVAL_DEF    0x00
                           A   101    ;   80	#endif
                           A   102    ;   81	
                           A   103    ;   82	#ifdef PORTH
                           A   104    ;   83	#define PORTH_ADDRVAL_DEF   0x01
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   3


PC     Object              I  Line    Source timer.src
                           A   105    ;   84	#define PORTH_CTLVAL_DEF    0xFF
                           A   106    ;   85	#define PORTH_OUTVAL_DEF    0x00
                           A   107    ;   86	#endif
                           A   108    ;   87	
                           A   109    ;   88	
                           A   110    ;   89	/*! Control Register access codes used 
                           A   111    ;   90	#define PORTADDR_NOFUNC			0x00
                           A   112    ;   91	#define PORTADDR_DATADIR		0x01
                           A   113    ;   92	#define PORTADDR_ALTFUNC		0x02
                           A   114    ;   93	#if defined(_Z8FMC16) || defined(__ZSLB
                           A   115    ;   94	#define PORTADDR_ALTFUNC0		0x02
                           A   116    ;   95	#endif
                           A   117    ;   96	#define PORTADDR_OPENDRAIN		0x03
                           A   118    ;   97	#define PORTADDR_HIGHDRIVE		0x04
                           A   119    ;   98	#define PORTADDR_STPMDREC		0x05
                           A   120    ;   99	#if defined (_Z8F1680)||defined(_Z8F04)
                           A   121    ;  100	#define PORTADDR_PULLUP		0x06
                           A   122    ;  101	#endif
                           A   123    ;  102	#if defined (_Z8F1680)||defined(_Z8F04)
                           A   124    ;  103	#define PORTADDR_ALTFUNCSET1	0x07
                           A   125    ;  104	#define PORTADDR_ALTFUNCSET2	0x08
                           A   126    ;  105	#endif
                           A   127    ;  106	#if defined(_Z8FMC16) || defined(__ZSLB
                           A   128    ;  107	#define PORTADDR_ALTFUNC1		0x07
                           A   129    ;  108	#define PORTADDR_IRQES			0x08
                           A   130    ;  109	#define PORTADDR_IRQPS			0x09
                           A   131    ;  110	#endif
                           A   132    ;  111	
                           A   133    ;  112	
                           A   134    ;  113	/*! Definitions for Current Drive Level
                           A   135    ;  114	#if defined(_Z8F04A) ||defined (_Z8F168
                           A   136    ;  115	#define DRIVELEVEL_3MA			0
                           A   137    ;  116	#define DRIVELEVEL_7MA			1
                           A   138    ;  117	#define DRIVELEVEL_13MA			2
                           A   139    ;  118	#define DRIVELEVEL_20MA			3
                           A   140    ;  119	#endif
                           A   141    ;  120	
                           A   142    ;  121	/*! Definitions for trigger edges */
                           A   143    ;  122	#define EDGE_FALLING			0
                           A   144    ;  123	#define EDGE_RISING				1
                           A   145    ;  124	
                           A   146    ;  125	/*! GPIO pin patterns */
                           A   147    ;  126	#define PORTPIN_ZERO		(BYTE)0x01	                           A   148    ;  127	#define PORTPIN_ONE			(BYTE)0x02	                           A   149    ;  128	#define PORTPIN_TWO			(BYTE)0x04	                           A   150    ;  129	#define PORTPIN_THREE		(BYTE)0x08	                           A   151    ;  130	#define PORTPIN_FOUR		(BYTE)0x10	                           A   152    ;  131	#define PORTPIN_FIVE 		(BYTE)0x20	                           A   153    ;  132	#define PORTPIN_SIX			(BYTE)0x40	                           A   154    ;  133	#define PORTPIN_SEVEN		(BYTE)0x80	                           A   155    ;  134	#define PORTPIN_FOURPINS_L	(BYTE)0x0F	                           A   156    ;  135	#define PORTPIN_FOURPINS_U	(BYTE)0xF0	Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   4


PC     Object              I  Line    Source timer.src
                           A   157    ;  136	#define PORTPIN_PATTERN_AA	(BYTE)0xAA	                           A   158    ;  137	#define PORTPIN_PATTERN_55	(BYTE)0x55	                           A   159    ;  138	#define PORTPIN_ALL			(BYTE)0xFF	                           A   160    ;  139	
                           A   161    ;  140	/*! Port mask index used for validating
                           A   162    ;  141	#define MSKINDEX_PORTB		(BYTE)0
                           A   163    ;  142	#define MSKINDEX_PORTC		(BYTE)1
                           A   164    ;  143	#define MSKINDEX_PORTD		(BYTE)2
                           A   165    ;  144	#define MSKINDEX_PORTE		(BYTE)3
                           A   166    ;  145	#define MSKINDEX_PORTF		(BYTE)4
                           A   167    ;  146	#define MSKINDEX_PORTG		(BYTE)5
                           A   168    ;  147	#define MSKINDEX_PORTH		(BYTE)6
                           A   169    ;  148	
                           A   170    ;  149	/*!
                           A   171    ;  150	 * \brief The settings required to conf
                           A   172    ;  151	 */
                           A   173    ;  152	typedef struct
                           A   174    ;  153	{
                           A   175    ;  154		BYTE addr ;					//!< Th
                           A   176    ;  155		BYTE ctl ;					//!< Th
                           A   177    ;  156		BYTE out ;					//!< Th
                           A   178    ;  157		BYTE in ;					//!< Th
                           A   179    ;  158	
                           A   180    ;  159	} PORT ;
                           A   181    .begrec "NONAME0",4
                           A   182    .define "addr"
                           A   183    .value 0
                           A   184    .class 8
                           A   185    .type 12
                           A   186    .endef
                           A   187    .define "ctl"
                           A   188    .value 1
                           A   189    .class 8
                           A   190    .type 12
                           A   191    .endef
                           A   192    .define "out"
                           A   193    .value 2
                           A   194    .class 8
                           A   195    .type 12
                           A   196    .endef
                           A   197    .define "in"
                           A   198    .value 3
                           A   199    .class 8
                           A   200    .type 12
                           A   201    .endef
                           A   202    .endrec "NONAME0"
                           A   203    ;    1	/**************************************
                           A   204    ;    2	 *  Copyright (C) 1999-2012 by  ZiLOG, 
                           A   205    ;    3	 *  All Rights Reserved
                           A   206    ;    4	 **************************************
                           A   207    ;    5	 *
                           A   208    ;    6	 * This header is for internal use only
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   5


PC     Object              I  Line    Source timer.src
                           A   209    ;    7	 * an ANSI standard header file.		                           A   210    ;    8	 *
                           A   211    ;    9	 **************************************
                           A   212    ;   10	
                           A   213    ;   11	#pragma once // Include this file only 
                           A   214    ;   12	#ifndef FORMAT_H
                           A   215    ;   13	#define FORMAT_H
                           A   216    ;   14	
                           A   217    ;   15	#include <zconst.h>
                           A   218    ;   16	#include <stdarg.h>
                           A   219    ;   17	
                           A   220    ;   18	/* Note: 24 bits times log(2) is 7.224 
                           A   221    ;   19	   We only need 14 if and when we suppo
                           A   222    ;   20	#define MAXDIGITS 10
                           A   223    ;   21	#define MINEXP -4
                           A   224    ;   22	#define DEFAULT_PRECISION 6
                           A   225    ;   23	
                           A   226    ;   24	
                           A   227    ;   25	/*  Sizes allowed for various data */
                           A   228    ;   26	/*  For small model, we must restrict t
                           A   229    ;   27	#if (defined(__MODEL__) && (__MODEL__ =
                           A   230    ;   28	#define FLT_CHARS 20  // Only need FLT_
                           A   231    ;   29	#define PTR_CHARS 11
                           A   232    ;   30	#define INT_CHARS 9
                           A   233    ;   31	#else
                           A   234    ;   32	#define FLT_CHARS 127
                           A   235    ;   33	#define PTR_CHARS 127
                           A   236    ;   34	#define INT_CHARS 127
                           A   237    ;   35	#endif
                           A   238    ;   36	
                           A   239    ;   37	/*	structures and defines for format r
                           A   240    ;   38	/*      NOTE: Some fields in this struc
                           A   241    ;   39	/*            known to the optimizer,  
                           A   242    ;   40	/*            code in optimizer/genprin
                           A   243    ;   41	struct fmt_type {
                           A   244    ;   42	  char flags;		/* flags bit mask *
                           A   245    ;   43	  char size;		/* size character h
                           A   246    ;   44	  char space;		/* space character 
                           A   247    ;   45	  char type;		/* type of argument
                           A   248    ;   46	  char field_width;	/* field width */
                           A   249    ;   47	  char precision;	/* precision */
                           A   250    ;   48	  char print_leading_char;  // Initial 
                           A   251    ;   49	     /* several print helper functions 
                           A   252    ;   50	      * The following need to be preser
                           A   253    ;   51	      * utilities.
                           A   254    ;   52	      */
                           A   255    ;   53	  far char* dest;       /* Destination 
                           A   256    ;   54	  unsigned char print_len;
                           A   257    ;   55	};
                           A   258    .begrec "fmt_type",10
                           A   259    .define "flags"
                           A   260    .value 0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   6


PC     Object              I  Line    Source timer.src
                           A   261    .class 8
                           A   262    .type 2
                           A   263    .endef
                           A   264    .define "size"
                           A   265    .value 1
                           A   266    .class 8
                           A   267    .type 2
                           A   268    .endef
                           A   269    .define "space"
                           A   270    .value 2
                           A   271    .class 8
                           A   272    .type 2
                           A   273    .endef
                           A   274    .define "type"
                           A   275    .value 3
                           A   276    .class 8
                           A   277    .type 2
                           A   278    .endef
                           A   279    .define "field_width"
                           A   280    .value 4
                           A   281    .class 8
                           A   282    .type 2
                           A   283    .endef
                           A   284    .define "precision"
                           A   285    .value 5
                           A   286    .class 8
                           A   287    .type 2
                           A   288    .endef
                           A   289    .define "print_leading_char"
                           A   290    .value 6
                           A   291    .class 8
                           A   292    .type 2
                           A   293    .endef
                           A   294    .define "dest"
                           A   295    .value 7
                           A   296    .class 8
                           A   297    .type 162
                           A   298    .endef
                           A   299    .define "print_len"
                           A   300    .value 9
                           A   301    .class 8
                           A   302    .type 12
                           A   303    .endef
                           A   304    .endrec "fmt_type"
                           A   305    ;   56	
                           A   306    ;   57	/* Some additional data for formatting 
                           A   307    ;   58	
                           A   308    ;   59	struct flt_fmt_data
                           A   309    ;   60	{
                           A   310    ;   61	  unsigned char pad_whole;
                           A   311    ;   62	  unsigned char pad_pre_fract;
                           A   312    ;   63	  unsigned char pad_post_fract;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   7


PC     Object              I  Line    Source timer.src
                           A   313    ;   64	  char * pad_at;
                           A   314    ;   65	};
                           A   315    .begrec "flt_fmt_data",4
                           A   316    .define "pad_whole"
                           A   317    .value 0
                           A   318    .class 8
                           A   319    .type 12
                           A   320    .endef
                           A   321    .define "pad_pre_fract"
                           A   322    .value 1
                           A   323    .class 8
                           A   324    .type 12
                           A   325    .endef
                           A   326    .define "pad_post_fract"
                           A   327    .value 2
                           A   328    .class 8
                           A   329    .type 12
                           A   330    .endef
                           A   331    .define "pad_at"
                           A   332    .value 3
                           A   333    .class 8
                           A   334    .type 130
                           A   335    .endef
                           A   336    .endrec "flt_fmt_data"
                           A   337    ;   66	
                           A   338    ;   67	/* Data passed between top level driver
                           A   339    ;   68	 * when printf's are generated inline *
                           A   340    ;   69	struct fmt_control_data
                           A   341    ;   70	{
                           A   342    ;   71	  char status;		/* status, OK, ERR,
                           A   343    ;   72	  char chr;		/* pass thru character 
                           A   344    ;   73	};
                           A   345    .begrec "fmt_control_data",2
                           A   346    .define "status"
                           A   347    .value 0
                           A   348    .class 8
                           A   349    .type 2
                           A   350    .endef
                           A   351    .define "chr"
                           A   352    .value 1
                           A   353    .class 8
                           A   354    .type 2
                           A   355    .endef
                           A   356    .endrec "fmt_control_data"
                           A   357    ;   74	
                           A   358    ;   75	
                           A   359    ;   76	struct _set_type{ char * begin; char *e
                           A   360    .begrec "_set_type",2
                           A   361    .define "begin"
                           A   362    .value 0
                           A   363    .class 8
                           A   364    .type 130
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   8


PC     Object              I  Line    Source timer.src
                           A   365    .endef
                           A   366    .define "end"
                           A   367    .value 1
                           A   368    .class 8
                           A   369    .type 130
                           A   370    .endef
                           A   371    .endrec "_set_type"
                           A   372    ;   77	struct near_set_type{ char near * begin
                           A   373    .begrec "near_set_type",2
                           A   374    .define "begin"
                           A   375    .value 0
                           A   376    .class 8
                           A   377    .type 130
                           A   378    .endef
                           A   379    .define "end"
                           A   380    .value 1
                           A   381    .class 8
                           A   382    .type 130
                           A   383    .endef
                           A   384    .endrec "near_set_type"
                           A   385    ;   78	struct far_set_type{ char far * begin; 
                           A   386    .begrec "far_set_type",4
                           A   387    .define "begin"
                           A   388    .value 0
                           A   389    .class 8
                           A   390    .type 162
                           A   391    .endef
                           A   392    .define "end"
                           A   393    .value 2
                           A   394    .class 8
                           A   395    .type 162
                           A   396    .endef
                           A   397    .endrec "far_set_type"
                           A   398    ;   79	struct rom_set_type{ char rom * begin; 
                           A   399    .begrec "rom_set_type",4
                           A   400    .define "begin"
                           A   401    .value 0
                           A   402    .class 8
                           A   403    .type 194
                           A   404    .endef
                           A   405    .define "end"
                           A   406    .value 2
                           A   407    .class 8
                           A   408    .type 194
                           A   409    .endef
                           A   410    .endrec "rom_set_type"
                           A   411    ;   80	
                           A   412    ;   81	/* info flags */
                           A   413    ;   82	#define FLT_INFO_SIGN	(1<<0)
                           A   414    ;   83	#define FLT_INFO_INF	(1<<1)
                           A   415    ;   84	#define FLT_INFO_NAN	(1<<2)
                           A   416    ;   85	
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:   9


PC     Object              I  Line    Source timer.src
                           A   417    ;   86	
                           A   418    ;   87	struct flt_info {
                           A   419    ;   88	  unsigned char flags;			/* 1=si
                           A   420    ;   89	  char exp;				/* (signed) exp
                           A   421    ;   90	  unsigned char digits[MAXDIGITS];	/* 
                           A   422    ;   91	};
                           A   423    .begrec "flt_info",12
                           A   424    .define "flags"
                           A   425    .value 0
                           A   426    .class 8
                           A   427    .type 12
                           A   428    .endef
                           A   429    .define "exp"
                           A   430    .value 1
                           A   431    .class 8
                           A   432    .type 2
                           A   433    .endef
                           A   434    .define "digits"
                           A   435    .value 2
                           A   436    .class 8
                           A   437    .dim 10
                           A   438    .type 108
                           A   439    .endef
                           A   440    .endrec "flt_info"
                           A   441    ;    1	/*!\file uart.h
                           A   442    ;    2	 * \brief Header file for Z8 Encore! UA
                           A   443    ;    3	 *
                           A   444    ;    4	 *  This file contains header informati
                           A   445    ;    5	 *  implementations for Z8 Encore! micr
                           A   446    ;    6	 *
                           A   447    ;    7	 *  This source file uses Doxygen-style
                           A   448    ;    8	 *  automatically.
                           A   449    ;    9	 *
                           A   450    ;   10	 *  Copyright (C) 1999-2004 by  ZiLOG, 
                           A   451    ;   11	 *  All Rights Reserved.
                           A   452    ;   12	 */
                           A   453    ;   13	
                           A   454    ;   14	#pragma once // Include this file only 
                           A   455    ;   15	#ifndef _UART_H_
                           A   456    ;   16	#define _UART_H_
                           A   457    ;   17	
                           A   458    ;   18	#include <defines.h>
                           A   459    ;   19	#include <uartdefs.h>
                           A   460    ;   20	
                           A   461    ;   21	
                           A   462    ;   22	
                           A   463    ;   23	/*! UART interrupt enable definitions u
                           A   464    ;   24	#if defined(_Z8FMC16)
                           A   465    ;   25	#define IRQ_U0RXI						                           A   466    ;   26	#define IRQ_U0TXI						                           A   467    ;   27	#else
                           A   468    ;   28	#define IRQ_U0RXI						Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  10


PC     Object              I  Line    Source timer.src
                           A   469    ;   29	#define IRQ_U0TXI						                           A   470    ;   30	#endif
                           A   471    ;   31	
                           A   472    ;   32	#ifdef EZ8_UART1
                           A   473    ;   33	#define IRQ_U1RXI						                           A   474    ;   34	#define IRQ_U1TXI						                           A   475    ;   35	#endif
                           A   476    ;   36	
                           A   477    ;   37	#define REGFILEADDR_U0TXD				                           A   478    ;   38	#define REGFILEADDR_U1TXD				                           A   479    ;   39	
                           A   480    ;   40	#define CLOCK_DIVISOR					                           A   481    ;   41		
                           A   482    ;   42	#define BAUD_9600						                           A   483    ;   43	#define BAUD_19200						                           A   484    ;   44	#define BAUD_38400						                           A   485    ;   45	#define BAUD_57600						                           A   486    ;   46	#define BAUD_115200						                           A   487    ;   47	
                           A   488    ;   48	#define DATABITS_8						                           A   489    ;   49	#define DATABITS_9						                           A   490    ;   50	
                           A   491    ;   51	#define STOPBITS_1						                           A   492    ;   52	#define STOPBITS_2						                           A   493    ;   53											                           A   494    ;   54	#define PAR_NOPARITY					                           A   495    ;   55	#define PAR_ODPARITY					                           A   496    ;   56	#define PAR_EVPARITY					                           A   497    ;   57	
                           A   498    ;   58	
                           A   499    ;   59	/*!
                           A   500    ;   60	 * The error codes consists of both the
                           A   501    ;   61	 * (through status registers), and the 
                           A   502    ;   62	 * software.
                           A   503    ;   63	 */
                           A   504    ;   64	#define UART_ERR_NONE					                           A   505    ;   65	#define UART_ERR_KBHIT					                           A   506    ;   66	#define UART_ERR_FRAMINGERR				                           A   507    ;   67	#define UART_ERR_PARITYERR				                           A   508    ;   68	#define UART_ERR_OVERRUNERR				                           A   509    ;   69	#define UART_ERR_BREAKINDICATIONERR		                           A   510    ;   70	#define UART_ERR_INVBAUDRATE			                           A   511    ;   71	#define UART_ERR_INVPARITY				                           A   512    ;   72	#define UART_ERR_INVSTOPBITS			                           A   513    ;   73	#define UART_ERR_INVDATABITS			                           A   514    ;   74	#define UART_ERR_BUSY					                           A   515    ;   75	#define UART_ERR_NULLPOINTER			                           A   516    ;   76	
                           A   517    ;   77	#define UART_ERR_FAILURE				                           A   518    ;   78	
                           A   519    ;   79	#define UART_ERR_USERBASE				                           A   520    ;   80	
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  11


PC     Object              I  Line    Source timer.src
                           A   521    ;   81	
                           A   522    ;   82	#define UART_IO_PENDING					                           A   523    ;   83	#define UART_IO_COMPLETE				                           A   524    ;   84	
                           A   525    ;   85	
                           A   526    ;   86	/*!
                           A   527    ;   87	 * \brief The settings required to conf
                           A   528    ;   88	 *
                           A   529    ;   89	 * This structure will contain all the 
                           A   530    ;   90	 * configure the UART device. This stru
                           A   531    ;   91	 * (initializing) the UART device as we
                           A   532    ;   92	 * the UART device.
                           A   533    ;   93	 */
                           A   534    ;   94	typedef struct
                           A   535    ;   95	{
                           A   536    ;   96	   INT32 baudRate ;						                           A   537    ;   97	   BYTE stopBits ;						                           A   538    ;   98	   BYTE parity ;						                           A   539    ;   99	
                           A   540    ;  100	} UART ;
                           A   541    .begrec "NONAME1",6
                           A   542    .define "baudRate"
                           A   543    .value 0
                           A   544    .class 8
                           A   545    .type 5
                           A   546    .endef
                           A   547    .define "stopBits"
                           A   548    .value 4
                           A   549    .class 8
                           A   550    .type 12
                           A   551    .endef
                           A   552    .define "parity"
                           A   553    .value 5
                           A   554    .class 8
                           A   555    .type 12
                           A   556    .endef
                           A   557    .endrec "NONAME1"
                           A   558    ;  101	
                           A   559    ;  102	typedef UINT8 BUFFSIZE_T ;
                           A   560    ;  103	
                           A   561    ;  104	/*!
                           A   562    ;  105	 * \brief The FIFO structure.
                           A   563    ;  106	 *
                           A   564    ;  107	 * This structure is used to hold infor
                           A   565    ;  108	 * transmit/receive FIFO buffers implem
                           A   566    ;  109	 */
                           A   567    ;  110	typedef struct
                           A   568    ;  111	{
                           A   569    ;  112		UCHAR *pBuffer ;					                           A   570    ;  113		BUFFSIZE_T next_in ;				                           A   571    ;  114		BUFFSIZE_T next_out ;				                           A   572    ;  115		BUFFSIZE_T size ;					Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  12


PC     Object              I  Line    Source timer.src
                           A   573    ;  116	
                           A   574    ;  117	} FIFO ;
                           A   575    .begrec "NONAME2",4
                           A   576    .define "pBuffer"
                           A   577    .value 0
                           A   578    .class 8
                           A   579    .type 140
                           A   580    .endef
                           A   581    .define "next_in"
                           A   582    .value 1
                           A   583    .class 8
                           A   584    .type 12
                           A   585    .endef
                           A   586    .define "next_out"
                           A   587    .value 2
                           A   588    .class 8
                           A   589    .type 12
                           A   590    .endef
                           A   591    .define "size"
                           A   592    .value 3
                           A   593    .class 8
                           A   594    .type 12
                           A   595    .endef
                           A   596    .endrec "NONAME2"
                           A   597    ;    1	/**************************************
                           A   598    ;    2	 * File: timer.c
                           A   599    ;    3	 * Description:
                           A   600    ;    4	 **************************************
                           A   601    ;    5	
                           A   602    ;    6	 /*************************************
                           A   603    ;    7	 *  header file includes
                           A   604    ;    8	 **************************************
                           A   605    ;    9	 #include <eZ8.h>
                           A   606    ;   10	#include <sio.h>
                           A   607    ;   11	#include "lampDriver.h"
                           A   608    ;   12	#include "timer.h"
                           A   609    ;   13	
                           A   610    ;   14	/**************************************
                           A   611    ;   15	 * constants defintion and global varia
                           A   612    ;   16	 **************************************
                           A   613    ;   17	
                           A   614    ;   18	#define STARTCOUNT 1
                           A   615    ;   19	#define BLINK_RELOAD 0xffff
                           A   616    ;   20	//#define LAMP_RELOAD 0xB400	//shoul
                           A   617    ;   21	#define LAMP_RELOAD 0x3fff	//should be
                           A   618    ;   22	
                           A   619    ;   23	void setupBlinkInterruptTimer1();
                           A   620    ;   24	void setupLampInterruptTimer0();
                           A   621    ;   25	
                           A   622    ;   26	/**************************************
                           A   623    ;   27	 * Global variables
                           A   624    ;   28	 **************************************
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  13


PC     Object              I  Line    Source timer.src
                           A   625    ;   29	
                           A   626    ;   30	
                           A   627    ;   31	/**************************************
                           A   628    ;   32	 * Function: isr_timer
                           A   629    ;   33	 * Description: 
                           A   630    ;   34	 *    Interrupt occurs when timer timeo
                           A   631    ;   35	 *
                           A   632    ;   36	 **************************************
                           A   633    ;   37	void interrupt lamp_timer(void) 
                           A   634    ;   38	{
0000                       A   635    _lamp_timer:
                           A   636    .define "_lamp_timer"
                           A   637    .value _lamp_timer
                           A   638    .class 2
                           A   639    .type 65
                           A   640    .endef
                           A   641    .begfunc "lamp_timer",38,"_lamp_timer"
0000 C8FFD0                A   642    	PUSHX	4093
0003 E8 000FFD             A   643    	LDX	4093,__intrp
0007 09100000              A   644    	ADDX	__intrp,#16
                           A   645    ;   39			lampISR();
                           A   646    .line 39
000B D6 0000               A   647    	CALL	_lampISR
                           A   648    ;   40	}
                           A   649    .line 40
000E 29100000              A   650    	SUBX	__intrp,#16
0012 D8FFD0                A   651    	POPX	4093
0015 BF                    A   652    	IRET	
                           A   653    .endfunc "lamp_timer",40,"_lamp_timer"
                           A   654    	SEGMENT ROM_DATA
                           A   655    
                           A   656    
                           A   657    ;**************************** _blink_timer ****
                           A   658    ;Name                         Addr/Register   S
                           A   659    ;_blinkISR                           IMPORT  --
                           A   660    
                           A   661    
                           A   662    ; Aggregate Stack Size: 0 (words)
                           A   663    
                           A   664    
                           A   665    	.FRAME _n_blink_timer,?_n_blink_timer,RDATA
                           A   666    	.FCALL _n_blinkISR
                           A   667    	SEGMENT timer_TEXT
                           A   668    ;   41	
                           A   669    ;   42	void interrupt blink_timer(void) 
                           A   670    ;   43	{
0016                       A   671    _blink_timer:
                           A   672    .define "_blink_timer"
                           A   673    .value _blink_timer
                           A   674    .class 2
                           A   675    .type 65
                           A   676    .endef
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  14


PC     Object              I  Line    Source timer.src
                           A   677    .begfunc "blink_timer",43,"_blink_timer"
0016 C8FFD0                A   678    	PUSHX	4093
0019 E8 000FFD             A   679    	LDX	4093,__intrp
001D 09100000              A   680    	ADDX	__intrp,#16
                           A   681    ;   44			blinkISR();
                           A   682    .line 44
0021 D6 0000               A   683    	CALL	_blinkISR
                           A   684    ;   45	}
                           A   685    .line 45
0024 29100000              A   686    	SUBX	__intrp,#16
0028 D8FFD0                A   687    	POPX	4093
002B BF                    A   688    	IRET	
                           A   689    .endfunc "blink_timer",45,"_blink_timer"
                           A   690    	SEGMENT ROM_DATA
                           A   691    
                           A   692    
                           A   693    ;**************************** _timer_init *****
                           A   694    ;Name                         Addr/Register   S
                           A   695    ;_setupLampInterruptTimer0           IMPORT  --
                           A   696    ;_setupBlinkInterruptTimer1          IMPORT  --
                           A   697    
                           A   698    
                           A   699    ; Aggregate Stack Size: 0 (words)
                           A   700    
                           A   701    
                           A   702    	.FRAME _n_timer_init,?_n_timer_init,RDATA
                           A   703    	.FCALL _n_setupBlinkInterruptTimer1
                           A   704    	.FCALL _n_setupLampInterruptTimer0
                           A   705    	SEGMENT timer_TEXT
                           A   706    ;   46	
                           A   707    ;   47	/**************************************
                           A   708    ;   48	 * Function: timer_init
                           A   709    ;   49	 * Description: 
                           A   710    ;   50	 *    Intialize timer0 and  timer inter
                           A   711    ;   51	 *
                           A   712    ;   52	 **************************************
                           A   713    ;   53	void timer_init(void)
                           A   714    ;   54	{
002C                       A   715    _timer_init:
                           A   716    .define "_timer_init"
                           A   717    .value _timer_init
                           A   718    .class 2
                           A   719    .type 65
                           A   720    .endef
                           A   721    .begfunc "timer_init",54,"_timer_init"
                           A   722    ;   55	
                           A   723    ;   56		/*---------------------------------
                           A   724    ;   57		 * The timer control registers(TxTC
                           A   725    ;   58		 * 
                           A   726    ;   59		 * +--------+-------+-------+-----+
                           A   727    ;   60		 * |        | BITS  |   7   |  6  |
                           A   728    ;   61		 * | TxTCL0 | ------+-------+-----+
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  15


PC     Object              I  Line    Source timer.src
                           A   729    ;   62		 * |        | FIELD | TMODE | TICON
                           A   730    ;   63		 * +--------+-------+-------+------
                           A   731    ;   64		 *                      |         |
                           A   732    ;   65		 *                      |         |
                           A   733    ;   66		 *                      |         |
                           A   734    ;   67		 *                      |         |
                           A   735    ;   68		 *                      |         |
                           A   736    ;   69		 *                      |         |
                           A   737    ;   70		 *                      |         |
                           A   738    ;   71		 *                      |         |
                           A   739    ;   72		 *                      |         |
                           A   740    ;   73		 *                      |         |
                           A   741    ;   74		 *                      |         |
                           A   742    ;   75		 *                      |         |
                           A   743    ;   76		 *                      |         |
                           A   744    ;   77		 *                      |         |
                           A   745    ;   78		 *                      |         |
                           A   746    ;   79		 *                      |         |
                           A   747    ;   80		 *                      |         |
                           A   748    ;   81		 *                      |         |
                           A   749    ;   82		 *                      |         |
                           A   750    ;   83		 *                      |          
                           A   751    ;   84		 *                      |          
                           A   752    ;   85		 *                      |          
                           A   753    ;   86		 *                      |
                           A   754    ;   87		 *                      |_ Timer Mo
                           A   755    ;   88		 *                         used alo
                           A   756    ;   89		 *                         mode of 
                           A   757    ;   90		 *
                           A   758    ;   91		 * +--------+-------+-----+------+-
                           A   759    ;   92		 * |        | BITS  |  7  |   6  | 
                           A   760    ;   93		 * | TxTCL1 | ------+-----+------+-
                           A   761    ;   94		 * |        | FIELD | TEN | TPOL | 
                           A   762    ;   95		 * +--------+-------+-----+------+-
                           A   763    ;   96		 *                     |      |    
                           A   764    ;   97		 *                     |      |    
                           A   765    ;   98		 *                     |      |    
                           A   766    ;   99		 *                     |      |    
                           A   767    ;  100		 *                     |      |    
                           A   768    ;  101		 *                     |      |    
                           A   769    ;  102		 *                     |      |    
                           A   770    ;  103		 *                     |      |    
                           A   771    ;  104		 *                     |      |    
                           A   772    ;  105		 *                     |      |    
                           A   773    ;  106		 *                     |      |    
                           A   774    ;  107		 *                     |      |    
                           A   775    ;  108		 *                     |      |    
                           A   776    ;  109		 *                     |      |    
                           A   777    ;  110		 *                     |      |    
                           A   778    ;  111		 *                     |      |    
                           A   779    ;  112		 *                     |      |    
                           A   780    ;  113		 *                     |      |    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  16


PC     Object              I  Line    Source timer.src
                           A   781    ;  114		 *                     |      |    
                           A   782    ;  115		 *                     |      |    
                           A   783    ;  116		 *                     |      |    
                           A   784    ;  117		 *                     |      |    
                           A   785    ;  118		 *                     |      |    
                           A   786    ;  119		 *                     |      |    
                           A   787    ;  120		 *                     |      |__ T
                           A   788    ;  121		 *                     |          F
                           A   789    ;  122		 *                     |          W
                           A   790    ;  123		 *                     |          W
                           A   791    ;  124		 *                     |__ Timer En
                           A   792    ;  125		 *                         0 = Time
                           A   793    ;  126		 *                         1 = Time
                           A   794    ;  127		 *
                           A   795    ;  128		 *
                           A   796    ;  129		 *
                           A   797    ;  130		 *---------------------------------
                           A   798    ;  131	
                           A   799    ;  132	
                           A   800    ;  133		/*---------------------------------
                           A   801    ;  134		 * Enable timer 0 interrupt via IRQ
                           A   802    ;  135		 *
                           A   803    ;  136		 * +---------+-------+-------+-----
                           A   804    ;  137		 * |         | BITS  |   7   |   6 
                           A   805    ;  138		 * | IRQ0ENH | ------+-------+-----
                           A   806    ;  139		 * |         | FIELD | T2ENH | T1EN
                           A   807    ;  140		 * +---------+-------+-------+-----
                           A   808    ;  141		 *                                 
                           A   809    ;  142		 *                                 
                           A   810    ;  143		 *
                           A   811    ;  144		 * +---------+-------+-------+-----
                           A   812    ;  145		 * |         | BITS  |   7   |   6 
                           A   813    ;  146		 * | IRQ0ENL | ------+-------+-----
                           A   814    ;  147		 * |         | FIELD | T2ENL | T1EN
                           A   815    ;  148		 * +---------+-------+-------+-----
                           A   816    ;  149		 *                                 
                           A   817    ;  150		 *                                 
                           A   818    ;  151		 *
                           A   819    ;  152		 *
                           A   820    ;  153		 *	IRQ0ENH[x] IRQ0ENL[x]    Priori
                           A   821    ;  154		 *	     0          0        Disabl
                           A   822    ;  155		 *	     0          1        Level 
                           A   823    ;  156		 * 	     1          0        Level 
                           A   824    ;  157		 *	     1          1        Level 
                           A   825    ;  158		 *	where x indicates the register 
                           A   826    ;  159		 *---------------------------------
                           A   827    ;  160	
                           A   828    ;  161		/*********
                           A   829    ;  162		 * enabled timer interrupts
                           A   830    ;  163		 */
                           A   831    ;  164		 
                           A   832    ;  165		setupBlinkInterruptTimer1();
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  17


PC     Object              I  Line    Source timer.src
                           A   833    .line 165
002C D6 003B               A   834    	CALL	_setupBlinkInterruptTimer1
                           A   835    ;  166		setupLampInterruptTimer0();
                           A   836    .line 166
002F D6 0058               A   837    	CALL	_setupLampInterruptTimer0
                           A   838    ;  167		
                           A   839    ;  168	    IRQ0ENH |= 0x60;	    // Nominal 
                           A   840    .line 168
0032 49600FC1              A   841    	ORX	4033,#96
                           A   842    ;  169	    IRQ0ENL &= ~0x60;       // 			                           A   843    .line 169
0036 599F0FC2              A   844    	ANDX	4034,#-97
                           A   845    ;  170	}
                           A   846    .line 170
003A AF                    A   847    	RET	
                           A   848    .endfunc "timer_init",170,"_timer_init"
                           A   849    	SEGMENT ROM_DATA
                           A   850    
                           A   851    
                           A   852    ;**************************** _setupBlinkInterr
                           A   853    ;Name                         Addr/Register   S
                           A   854    ;_SET_VECTOR                         IMPORT  --
                           A   855    
                           A   856    
                           A   857    ; Aggregate Stack Size: 0 (words)
                           A   858    
                           A   859    
                           A   860    	.FRAME _n_setupBlinkInterruptTimer1,?_n_set
                           A   861    	SEGMENT timer_TEXT
                           A   862    ;  171	
                           A   863    ;  172		
                           A   864    ;  173	void setupBlinkInterruptTimer1(){
003B                       A   865    _setupBlinkInterruptTimer1:
                           A   866    .define "_setupBlinkInterruptTimer1"
                           A   867    .value _setupBlinkInterruptTimer1
                           A   868    .class 2
                           A   869    .type 65
                           A   870    .endef
                           A   871    .begfunc "setupBlinkInterruptTimer1",173,"_setu
                           A   872    ;  174			unsigned char timerPres;	
                           A   873    ;  175			timerPres = 7;
                           A   874    ;  176		
                           A   875    ;  177			SET_VECTOR(TIMER1, blink_timer)
                           A   876    ;  178	
                           A   877    ;  179			//Reload value = (1 sec * syste
                           A   878    ;  180			//Reload value = (1 * 20000000)
                           A   879    ;  181			T1CTL1 |= 0x1;  // CONTINUOUS m
                           A   880    .line 181
003B 49010F0F              A   881    	ORX	3855,#1
                           A   882    ;  182			T1CTL1 |= (timerPres<<3); //set
                           A   883    .line 182
003F 49380F0F              A   884    	ORX	3855,#56
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  18


PC     Object              I  Line    Source timer.src
                           A   885    ;  183		
                           A   886    ;  184			T1H = (STARTCOUNT >> 8);
                           A   887    .line 184
0043 E9000F08              A   888    	LDX	3848,#-0
                           A   889    ;  185			T1L = (STARTCOUNT & 0x00FF);
                           A   890    .line 185
0047 E9010F09              A   891    	LDX	3849,#1
                           A   892    ;  186			T1RH = (BLINK_RELOAD >> 8);
                           A   893    .line 186
004B E9FF0F0A              A   894    	LDX	3850,#255
                           A   895    ;  187			T1RL = (BLINK_RELOAD & 0x00FF);
                           A   896    .line 187
004F E9FF0F0B              A   897    	LDX	3851,#255
                           A   898    ;  188			
                           A   899    ;  189			T1CTL1 |= 0x80; // Enable timer
                           A   900    .line 189
0053 49800F0F              A   901    	ORX	3855,#128
                           A   902    ;  190		}
                           A   903    .line 190
0057 AF                    A   904    	RET	
                           A   905    .endfunc "setupBlinkInterruptTimer1",190,"_setu
                           A   906    	SEGMENT ROM_DATA
                           A   907    
                           A   908    
                           A   909    ;**************************** _setupLampInterru
                           A   910    ;Name                         Addr/Register   S
                           A   911    ;_SET_VECTOR                         IMPORT  --
                           A   912    
                           A   913    
                           A   914    ; Aggregate Stack Size: 0 (words)
                           A   915    
                           A   916    
                           A   917    	.FRAME _n_setupLampInterruptTimer0,?_n_setu
                           A   918    	SEGMENT timer_TEXT
                           A   919    ;  191		
                           A   920    ;  192	void setupLampInterruptTimer0(){		0058                       A   921    _setupLampInterruptTimer0:
                           A   922    .define "_setupLampInterruptTimer0"
                           A   923    .value _setupLampInterruptTimer0
                           A   924    .class 2
                           A   925    .type 65
                           A   926    .endef
                           A   927    .begfunc "setupLampInterruptTimer0",192,"_setup
                           A   928    ;  193			unsigned char timerPres;
                           A   929    ;  194			SET_VECTOR(TIMER0, lamp_timer);
                           A   930    ;  195			timerPres = 4;
                           A   931    ;  196			//Reload value = (1 sec * syste
                           A   932    ;  197			//Reload value = (1 * 20000000)
                           A   933    ;  198			T0CTL1 |= 0x1;  // CONTINUOUS m
                           A   934    .line 198
0058 49010F07              A   935    	ORX	3847,#1
                           A   936    ;  199			T0CTL1 |= (timerPres<<3); //set
Zilog eZ8 Encore! Macro Assembler Version 2.53 (14010603) 26-May-15     23:49:36     page:  19


PC     Object              I  Line    Source timer.src
                           A   937    .line 199
005C 49200F07              A   938    	ORX	3847,#32
                           A   939    ;  200		
                           A   940    ;  201			T0H = (STARTCOUNT >> 8);
                           A   941    .line 201
0060 E9000F00              A   942    	LDX	3840,#-0
                           A   943    ;  202			T0L = (STARTCOUNT & 0x00FF);
                           A   944    .line 202
0064 E9010F01              A   945    	LDX	3841,#1
                           A   946    ;  203			T0RH = (LAMP_RELOAD >> 8);
                           A   947    .line 203
0068 E93F0F02              A   948    	LDX	3842,#63
                           A   949    ;  204			T0RL = (LAMP_RELOAD & 0x00FF);
                           A   950    .line 204
006C E9FF0F03              A   951    	LDX	3843,#255
                           A   952    ;  205			
                           A   953    ;  206			T0CTL1 |= 0x80; // Enable timer
                           A   954    .line 206
0070 49800F07              A   955    	ORX	3847,#128
                           A   956    ;  207		}
                           A   957    .line 207
0074 AF                    A   958    	RET	
                           A   959    .endfunc "setupLampInterruptTimer0",207,"_setup
000C 0000                  A   960    	VECTOR	TIMER0=_lamp_timer
000A 0016                  A   961    	VECTOR	TIMER1=_blink_timer
                           A   962    	XREF _blinkISR:ROM
                           A   963    	XREF _lampISR:ROM
                           A   964    	XREF __intrp:RDATA
                           A   965    	XDEF _setupLampInterruptTimer0
                           A   966    	XDEF _setupBlinkInterruptTimer1
                           A   967    	XDEF _timer_init
                           A   968    	XDEF _blink_timer
                           A   969    	XDEF _lamp_timer
                           A   970    	END


Errors: 0
Warnings: 0
Lines Assembled: 971
